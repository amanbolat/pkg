// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package pkgsql

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// MigrationFormatFlyway is a MigrationFormat of type Flyway.
	MigrationFormatFlyway MigrationFormat = iota
	// MigrationFormatGomigrate is a MigrationFormat of type Gomigrate.
	MigrationFormatGomigrate
)

var ErrInvalidMigrationFormat = errors.New("not a valid MigrationFormat")

const _MigrationFormatName = "flywaygomigrate"

var _MigrationFormatMap = map[MigrationFormat]string{
	MigrationFormatFlyway:    _MigrationFormatName[0:6],
	MigrationFormatGomigrate: _MigrationFormatName[6:15],
}

// String implements the Stringer interface.
func (x MigrationFormat) String() string {
	if str, ok := _MigrationFormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MigrationFormat(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MigrationFormat) IsValid() bool {
	_, ok := _MigrationFormatMap[x]
	return ok
}

var _MigrationFormatValue = map[string]MigrationFormat{
	_MigrationFormatName[0:6]:                   MigrationFormatFlyway,
	strings.ToLower(_MigrationFormatName[0:6]):  MigrationFormatFlyway,
	_MigrationFormatName[6:15]:                  MigrationFormatGomigrate,
	strings.ToLower(_MigrationFormatName[6:15]): MigrationFormatGomigrate,
}

// ParseMigrationFormat attempts to convert a string to a MigrationFormat.
func ParseMigrationFormat(name string) (MigrationFormat, error) {
	if x, ok := _MigrationFormatValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _MigrationFormatValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return MigrationFormat(0), fmt.Errorf("%s is %w", name, ErrInvalidMigrationFormat)
}

// MarshalText implements the text marshaller method.
func (x MigrationFormat) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MigrationFormat) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMigrationFormat(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errMigrationFormatNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *MigrationFormat) Scan(value interface{}) (err error) {
	if value == nil {
		*x = MigrationFormat(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = MigrationFormat(v)
	case string:
		*x, err = ParseMigrationFormat(v)
	case []byte:
		*x, err = ParseMigrationFormat(string(v))
	case MigrationFormat:
		*x = v
	case int:
		*x = MigrationFormat(v)
	case *MigrationFormat:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = *v
	case uint:
		*x = MigrationFormat(v)
	case uint64:
		*x = MigrationFormat(v)
	case *int:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = MigrationFormat(*v)
	case *int64:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = MigrationFormat(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = MigrationFormat(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = MigrationFormat(*v)
	case *uint:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = MigrationFormat(*v)
	case *uint64:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x = MigrationFormat(*v)
	case *string:
		if v == nil {
			return errMigrationFormatNilPtr
		}
		*x, err = ParseMigrationFormat(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x MigrationFormat) Value() (driver.Value, error) {
	return x.String(), nil
}
